# coding: utf-8
"""
Created on 18.06.18
@author: Eugeny Kurkovich
"""
import re
import json
import yaml

import pytest
import requests

from six import string_types

import flex
import openapi_core

from api.utils.scalr_api import ScalrApiSession
from api.utils.helpers import serialize_platform_store
from api.utils.helpers import remove_empty_values
from api.utils.consts import APIParams
from api.utils.openapi_interface import RequestsOpenAPIRequest, RequestsOpenAPIResponse


API_PREFIX = '/api/v1beta0/'
SPEC_FILE_FORMAT = '{}-autogenerated.yaml'


class AppSession(object):
    #TODO: Openapi not validate path normal, only pattern, fix this

    def __init__(self, request):
        self._request = request
        self.spec_path = request.config.working_dir / 'specs'
        self.specs = {'user': None, 'account': None, 'global': None, 'openapi': None}
        self.paths = {}

        self.load_openapi_spec()
        self.load_swagger_spec()
        self.make_paths()

    def load_openapi_spec(self):
        openapi_file = self.spec_path / 'openapi.v1beta0.yml'
        if openapi_file.is_file():
            with open(openapi_file, 'r') as fp:
                yaml_spec = yaml.load(fp)
            self.specs['openapi'] = openapi_core.create_spec(
                json.loads(json.dumps(yaml_spec)))  # openapi_validator not work with ints after yaml.load

    def load_swagger_spec(self):
        for spec in ('user', 'account', 'global'):
            spec_file = self.spec_path / f'{spec}.v1beta0.yml'
            if spec_file.is_file():
                self.specs[spec] = flex.load(spec_file.as_posix())

    def make_paths(self):
        for path in self.specs['openapi'].paths:
            full_url = '{}{}'.format(self.specs['openapi'].default_url,
                                     path.replace('{', '').replace('}', '').lstrip('/'))
            self.paths[full_url] = '{}{}'.format(self.specs['openapi'].default_url, path.lstrip('/'))

    def __getattr__(self, name):
        def _handler(*args, **kwargs):
            if len(args) == 1:
                if not isinstance(args[0], string_types):
                    raise ValueError('Request args mismatch')
            else:
                raise ValueError('Request session expected at most 1 argument, got {0}'.format(len(args)))
            kwargs['method'] = name
            return self._execute_request(*args, **kwargs)
        return _handler

    def _execute_request(self, endpoint, method, params=None, body=None, filters=None):
        scope = endpoint.split('/')[3]

        request_kwargs = dict(
            method=APIParams.request_types[method],
            url=self._get_url(endpoint),
            params=params or {},
            body=body,
            filters=filters
        )

        if scope in ('account', 'user'):
            key_id = self._request.config.api_environment['config']['account_api']['id']
            secret_key = self._request.config.api_environment['config']['account_api']['secret']
        else:
            key_id = self._request.config.api_environment['config']['global_api']['id']
            secret_key = self._request.config.api_environment['config']['global_api']['secret']

        api = ScalrApiSession(
            secret_key_id=key_id,
            secret_key=secret_key
        )

        response = api.request(
            serializer=serialize_platform_store,
            **request_kwargs
        )

        if self._request.config.getoption('api_validation'):
            self.validate(response, scope)

        return response

    def _get_url(self, endpoint):
        return 'http://{}{}'.format(self._request.config.api_environment['host'], self.paths[endpoint])

    def _validate_openapi(self, response):
        openapi_request_validator = openapi_core.shortcuts.RequestValidator(self.specs['openapi'])
        openapi_response_validator = openapi_core.shortcuts.ResponseValidator(self.specs['openapi'])
        req = RequestsOpenAPIRequest(response)
        resp = RequestsOpenAPIResponse(response)
        openapi_request_validator.validate(req).raise_for_errors()
        openapi_response_validator.validate(req, resp).raise_for_errors()

    def _validate_swagger(self, response, scope):
        flex.core.validate_api_call(self.specs[scope], response.request, response)

    def validate(self, response, scope):
        self._validate_openapi(response)
        # self._validate_swagger(response, scope)


@pytest.fixture(scope='session', autouse=True)
def api(request):
    session = AppSession(request)
    return session

